Action -> {
  u8:value
  bool:valid
}


Record -> {
  -> {
    Action:action
    String:payLoad
  }
}

Pac -> {
  -> {
    u8:payLoad
    String:content
  }
}

Data -> Pac | Record

User -> {
  -> {
    String:name
    Data:data
  }
}

UserAction -> User | Action
UserAction:userAction{data{payLoad->2}}

userAction ?  {
  User:{data?(Record:{action{valid?=true payLoad(v)}} | Pac:{payLoad?>2 content(v)})} -> v
  User:{name(n)} -> n
  -> "NotOk"
}

// TODO: make analyzer properly use unknow and enforce
// TODO: make analyzer structures for patterns
// TODO: adapt old example with new syntax ideas
// TODO: make sure that structure is used as default for sure
// Pattern assert on shape directly if we want value we use =value

// That mean
Record -> {
  -> {
    Action:action
    String:payLoad
  }
}

process -> {
  Action:action
  -> validate{action.payLoad}!
}

String:nany -> "mama"

Record:record
Record:anotherRecord

record ? {
  Record -> "" /* match if is of shape record */
  2 | 3 -> "" /* match if of shape 2 or 3 so if 2 or 3 */
  2.. -> "" /* match if more than 2 aka shape range 2.. */
  2 -> "" /* match if shape 2 aka value is 2 */
  nany -> "" /* match if shape mama aka value mama */
  anotherRecord -> "" /* match if shape anotherRecord aka value anotherRecord */
}

record ? {
  process -> "wow" /* shape defined by process */
  =process -> "woaw" /* process value */
  {->process} -> "wiw" /* shape of process */
}
