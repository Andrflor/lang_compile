{
  "name": "Refinement Types with Mathematical Structures and Theorem Proving",
  "description": "Tests refinement types, constraint validation, theorem proving through constant defaults, compile-time effects, and mathematical structures",
  "source": "// Refinement type\nintPlus -> {\n  -> {\n    (v) -> 1\n    -> v ?! >0\n   }!\n}\n(u8|i8)&>10:x\nintPlus:b -> 4\nintPlus:c -> 10\nFoo -> {\n  T -> 0\n  -> T%2 ? {\n    0 -> // something\n    1 -> // something else\n  }\n}\n// Theorem proving trough constraint constant default\nRSAIdentity -> {\n  PubKey:pub\n  PrivKey:priv\n  -> {\n    String:m -> ??\n    -> decrypt{encrypt{m, priv}! pub}! = m ?! true\n  }\n}\n// Compile time effect trigered on anythinhg\ncompileTimeGet -> !{@http.get}\n// Can be used on anything\nN -> {\n  -> {}\n  -> {{} ...N:}\n  equal -> {\n    N:a\n    N:b\n    -> a = b\n  }\n  add -> {\n    N:a\n    N:b\n    -> {...a ...b}\n  }\n  sub -> {\n    N:a\n    N:b\n    -> a ? {\n      {...b ...(r)} -> r\n      -> b ? {\n        {...a ...(r)} -> {-1 r}\n        -> {}\n    }\n  }\n  mult -> {\n    N:a\n    N:b\n    -> a ? {\n      {{} ...(r)} -> {...b ...mult{r b}!}\n      -> {}\n    }\n  }\n}\nZ -> {\n  -> N:\n  -> {-1 N:}\n  equal -> {\n    Z:a\n    Z:b\n    -> a = b\n  }\n  sym -> {\n    Z:z\n    -> z ? {\n      {-1 N:(n)} -> n\n      N: -> Z:{-1 z}\n    }\n  }\n  add -> {\n    Z:a\n    Z:b\n    {a b} ? {\n      {N:(a) N:(b)} -> N.add{a b}!\n      {N:(a) {-1 N:(b)}} -> N.sub{a b}!\n      {{-1 N:(a)} N:(b)} -> N.sub{b a}!\n      {{-1 N:(a)} {-1 N:(b)}} -> {-1 N.add{a b}!}\n    }\n  }\n  sub -> {\n    Z:a\n    Z:b\n    -> add{a symetric{b}!}!\n  }\n  mult -> {\n    Z:a\n    Z:b\n    -> {a b} ? {\n      {N:(a) N:(b)} | {{-1 N:(a)} {-1 N:(b)}} -> N.mult{a b}!\n      {{-1 N:(a)} N:(b)} | {{N:(a)} {-1 N:(b)}} -> Z:{-1 N.mult{a b}!}\n    }\n  }\n}\nQ -> {\n  -> Z:\n  -> {Z:n (N&~{}):d}\n  equal -> {\n    Q:a\n    Q:b\n    -> Z.mult{a.n b.d}! = Z.mult{b.n a.d}!\n  }\n  inv -> {\n    Q:{n?(!={}&!={-1 {}})}:q\n    -> q.n ? {\n      (N&~{}):(n) -> Q:{q n}\n      {-1 (N&~{})}:(n)} -> Q:{{-1 q} n}\n    }\n  }\n  sym -> {\n    Q:q\n    -> Q:{Z.sym{q.n}! d}\n  }\n  add -> {\n    Q:a\n    Q:b\n    -> Q:{Z.add{Z.mult{a.n b.d}! Z.mult{b.n a.d}!}! N.mult{a.d b.d}!}\n  }\n  mult -> {\n    Q:a\n    Q:b\n    -> {Z.mult{a.n b.n}! N.mult{a.d b.d}!}\n  }\n}\nsucc -> {\n  Nat:nat\n  -> {...nat {}}\n}\none -> {{}}\ntwo -> {{}{}}n\nsucc{one}! = two // true\nadd -> {\n  Nat:a\n  Nat:b\n  -> {...a ...b}\n}\nmult -> {\n  Nat:a\n  Nat:b\n  -> a ? {\n    {} -> {}\n    {{} ...Nat:(r)} -> {...b ...mult{r b}!}\n  }\n}\nmultByOne -> {\n  Nat:n -> ??\n  -> mult{n {{}}}! = n ?! true\n}\naddCommutative -> {\n  Nat:a -> ??\n  Nat:b -> ??\n  -> add{a b}! = add{b a}! ?! true\n}\nRing {\n  T -> {}\n  addNeutral -> {}\n  add -> {\n    T: a\n    T: b\n    -> {...a ...b}\n  }\n  mult -> {\n    T:a\n    T:b\n    -> a ? {\n      {} -> {}\n      {{} ...T:(r)} -> {...b ...mult{r b}!}\n    }\n  }\n  addCommutative -> {\n    T:a -> ??\n    T:b -> ??\n    -> add{a b}! = add{b a}! ?! true\n  }\n  multByOne -> {\n  T:n -> ??\n  -> mult{n {{}}}! = n ?! true\n  }\n}",
  "expect": "Scope[Pointing(Identifier(intPlus),Scope[Product(Execute(Scope[Pointing(Identifier(,v),Literal(Integer,1)),Product(Enforce(Identifier(v),Operator(Greater,nil,Literal(Integer,0))))],[]))]),Constraint(Operator(And,Operator(Or,Identifier(u8),Identifier(i8)),Operator(Greater,nil,Literal(Integer,10))),Identifier(x)),Pointing(Constraint(Identifier(intPlus),Identifier(b)),Literal(Integer,4)),Pointing(Constraint(Identifier(intPlus),Identifier(c)),Literal(Integer,10)),Pointing(Identifier(Foo),Scope[Pointing(Identifier(T),Literal(Integer,0)),Product(Pattern(Operator(Mod,Identifier(T),Literal(Integer,2)),[Branch(Literal(Integer,0),nil),Branch(Literal(Integer,1),nil)]))]),Pointing(Identifier(RSAIdentity),Scope[Constraint(Identifier(PubKey),Identifier(pub)),Constraint(Identifier(PrivKey),Identifier(priv)),Product(Scope[Pointing(Constraint(Identifier(String),Identifier(m)),Unknown),Product(Enforce(Operator(Equal,Execute(Override(Identifier(decrypt),[Execute(Override(Identifier(encrypt),[Identifier(m),Identifier(priv)]),[]),Identifier(pub)]),[]),Identifier(m)),Identifier(true)))])]),Pointing(Identifier(compileTimeGet),Override(Execute(nil,[]),[Property(External(http,nil),Identifier(get))])),Pointing(Identifier(N),Scope[Product(Scope[]),Product(Scope[Scope[],Constraint(Expand(Identifier(N)),nil)]),Pointing(Identifier(equal),Scope[Constraint(Identifier(N),Identifier(a)),Constraint(Identifier(N),Identifier(b)),Product(Operator(Equal,Identifier(a),Identifier(b)))]),Pointing(Identifier(add),Scope[Constraint(Identifier(N),Identifier(a)),Constraint(Identifier(N),Identifier(b)),Product(Scope[Expand(Identifier(a)),Expand(Identifier(b))])]),Pointing(Identifier(sub),Scope[Constraint(Identifier(N),Identifier(a)),Constraint(Identifier(N),Identifier(b)),Product(Pattern(Identifier(a),[Branch(Scope[Expand(Identifier(b)),Expand(Identifier(,r))],Identifier(r)),Branch(nil,Pattern(Identifier(b),[Branch(Scope[Expand(Identifier(a)),Expand(Identifier(,r))],Scope[Operator(Subtract,nil,Literal(Integer,1)),Identifier(r)]),Branch(nil,Scope[])]))])),Pointing(Identifier(mult),Scope[Constraint(Identifier(N),Identifier(a)),Constraint(Identifier(N),Identifier(b)),Product(Pattern(Identifier(a),[Branch(Scope[Scope[],Expand(Identifier(,r))],Scope[Expand(Identifier(b)),Expand(Execute(Override(Identifier(mult),[Identifier(r),Identifier(b)]),[]))]),Branch(nil,Scope[])]))])]),Pointing(Identifier(Z),Scope[Product(Constraint(Identifier(N),nil)),Product(Scope[Operator(Subtract,nil,Literal(Integer,1)),Constraint(Identifier(N),nil)]),Pointing(Identifier(equal),Scope[Constraint(Identifier(Z),Identifier(a)),Constraint(Identifier(Z),Identifier(b)),Product(Operator(Equal,Identifier(a),Identifier(b)))]),Pointing(Identifier(sym),Scope[Constraint(Identifier(Z),Identifier(z)),Product(Pattern(Identifier(z),[Branch(Scope[Operator(Subtract,nil,Literal(Integer,1)),Constraint(Identifier(N),Identifier(,n))],Identifier(n)),Branch(Constraint(Identifier(N),nil),Override(Constraint(Identifier(Z),nil),[Operator(Subtract,nil,Literal(Integer,1)),Identifier(z)]))]))]),Pointing(Identifier(add),Scope[Constraint(Identifier(Z),Identifier(a)),Constraint(Identifier(Z),Identifier(b)),Pattern(Scope[Identifier(a),Identifier(b)],[Branch(Scope[Constraint(Identifier(N),Identifier(,a)),Constraint(Identifier(N),Identifier(,b))],Execute(Override(Property(Identifier(N),Identifier(add)),[Identifier(a),Identifier(b)]),[])),Branch(Scope[Constraint(Identifier(N),Identifier(a)),Scope[Operator(Subtract,nil,Literal(Integer,1)),Constraint(Identifier(N),Identifier(b))]],Execute(Override(Property(Identifier(N),Identifier(sub)),[Identifier(a),Identifier(b)]),[])),Branch(Scope[Scope[Operator(Subtract,nil,Literal(Integer,1)),Constraint(Identifier(N),Identifier(a))],Constraint(Identifier(N),Identifier(b))],Execute(Override(Property(Identifier(N),Identifier(sub)),[Identifier(b),Identifier(a)]),[])),Branch(Scope[Scope[Operator(Subtract,nil,Literal(Integer,1)),Constraint(Identifier(N),Identifier(a))],Scope[Operator(Subtract,nil,Literal(Integer,1)),Constraint(Identifier(N),Identifier(b))]],Scope[Operator(Subtract,nil,Literal(Integer,1)),Execute(Override(Property(Identifier(N),Identifier(add)),[Identifier(a),Identifier(b)]),[])])])]),Pointing(Identifier(sub),Scope[Constraint(Identifier(Z),Identifier(a)),Constraint(Identifier(Z),Identifier(b)),Product(Execute(Override(Identifier(add),[Identifier(a),Execute(Override(Identifier(symetric),[Identifier(b)]),[])]),[]))]),Pointing(Identifier(mult),Scope[Constraint(Identifier(Z),Identifier(a)),Constraint(Identifier(Z),Identifier(b)),Product(Pattern(Scope[Identifier(a),Identifier(b)]),[Branch(Operator(Or,Scope[Constraint(Identifier(N),Identifier(a)),Constraint(Identifier(N),Identifier(b))],Scope[Scope[Operator(Subtract,nil,Literal(Integer,1)),Constraint(Identifier(N),Identifier(a))],Scope[Operator(Subtract,nil,Literal(Integer,1)),Constraint(Identifier(N),Identifier(b))]]),Execute(Override(Property(Identifier(N),Identifier(mult)),[Identifier(a),Identifier(b)]),[])),Branch(Operator(Or,Scope[Scope[Operator(Subtract,nil,Literal(Integer,1)),Constraint(Identifier(N),Identifier(a))],Constraint(Identifier(N),Identifier(b))],Scope[Constraint(Identifier(N),Identifier(a)),Scope[Operator(Subtract,nil,Literal(Integer,1)),Constraint(Identifier(N),Identifier(b))]]),Override(Identifier(Z),[Operator(Subtract,nil,Literal(Integer,1)),Execute(Override(Property(Identifier(N),Identifier(mult)),[Identifier(a),Identifier(b)]),[])]))])])]),Pointing(Identifier(Q),Scope[Product(Constraint(Identifier(Z),nil)),Product(Scope[Constraint(Identifier(Z),Identifier(n)),Constraint(Operator(And,Identifier(N),Operator(Not,Scope[])),Identifier(d))]),Pointing(Identifier(equal),Scope[Constraint(Identifier(Q),Identifier(a)),Constraint(Identifier(Q),Identifier(b)),Product(Operator(Equal,Execute(Override(Property(Identifier(Z),Identifier(mult)),[Property(Identifier(a),Identifier(n)),Property(Identifier(b),Identifier(d))]),[]),Execute(Override(Property(Identifier(Z),Identifier(mult)),[Property(Identifier(b),Identifier(n)),Property(Identifier(a),Identifier(d))]),[])))]),Pointing(Identifier(inv),Scope[Constraint(Override(Identifier(Q),[Pattern(Identifier(n),[Branch(Operator(And,Operator(NotEqual,nil,Scope[]),Operator(NotEqual,nil,Scope[Operator(Subtract,nil,Literal(Integer,1)),Scope[]])),nil)])]),Identifier(q)),Product(Pattern(Property(Identifier(q),Identifier(n)),[Branch(Constraint(Operator(And,Identifier(N),Operator(Not,Scope[])),Identifier(n)),Override(Identifier(Q),[Identifier(q),Identifier(n)])),Branch(Scope[Operator(Subtract,nil,Literal(Integer,1)),Constraint(Operator(And,Identifier(N),Operator(Not,Scope[])),Identifier(n))],Override(Identifier(Q),[Scope[Operator(Subtract,nil,Literal(Integer,1)),Identifier(q)],Identifier(n)]))]))]),Pointing(Identifier(sym),Scope[Constraint(Identifier(Q),Identifier(q)),Product(Override(Identifier(Q),[Execute(Override(Property(Identifier(Z),Identifier(sym)),[Property(Identifier(q),Identifier(n))]),[]),Identifier(d)]))]),Pointing(Identifier(add),Scope[Constraint(Identifier(Q),Identifier(a)),Constraint(Identifier(Q),Identifier(b)),Product(Override(Identifier(Q),[Execute(Override(Property(Identifier(Z),Identifier(add)),[Execute(Override(Property(Identifier(Z),Identifier(mult)),[Property(Identifier(a),Identifier(n)),Property(Identifier(b),Identifier(d))]),[]),Execute(Override(Property(Identifier(Z),Identifier(mult)),[Property(Identifier(b),Identifier(n)),Property(Identifier(a),Identifier(d))]),[])]),[]),Execute(Override(Property(Identifier(N),Identifier(mult)),[Property(Identifier(a),Identifier(d)),Property(Identifier(b),Identifier(d))]),[])]]))]),Pointing(Identifier(mult),Scope[Constraint(Identifier(Q),Identifier(a)),Constraint(Identifier(Q),Identifier(b)),Product(Scope[Execute(Override(Property(Identifier(Z),Identifier(mult)),[Property(Identifier(a),Identifier(n)),Property(Identifier(b),Identifier(n))]),[]),Execute(Override(Property(Identifier(N),Identifier(mult)),[Property(Identifier(a),Identifier(d)),Property(Identifier(b),Identifier(d))]),[])])])]),Pointing(Identifier(succ),Scope[Constraint(Identifier(Nat),Identifier(nat)),Product(Scope[Expand(Identifier(nat)),Scope[]])]),Pointing(Identifier(one),Scope[Scope[]]),Pointing(Identifier(two),Scope[Scope[],Scope[]]),Operator(Equal,Execute(Override(Identifier(succ),[Identifier(one)]),[]),Identifier(two)),Pointing(Identifier(add),Scope[Constraint(Identifier(Nat),Identifier(a)),Constraint(Identifier(N),Identifier(b)),Product(Scope[Expand(Identifier(a)),Expand(Identifier(b))])]),Pointing(Identifier(mult),Scope[Constraint(Identifier(Nat),Identifier(a)),Constraint(Identifier(Nat),Identifier(b)),Product(Pattern(Identifier(a),[Branch(Scope[],Scope[]),Branch(Scope[Scope[],Constraint(Expand(Identifier(Nat)),Identifier(r))],Scope[Expand(Identifier(b)),Expand(Execute(Override(Identifier(mult),[Identifier(r),Identifier(b)]),[])])])))]),Pointing(Identifier(multByOne),Scope[Pointing(Constraint(Identifier(Nat),Identifier(n)),Unknown),Product(Operator(Equal,Execute(Override(Identifier(mult),[Identifier(n),Scope[Scope[]]]),[]),Identifier(n)))]),Pointing(Identifier(addCommutative),Scope[Pointing(Constraint(Identifier(Nat),Identifier(a)),Unknown),Pointing(Constraint(Identifier(Nat),Identifier(b)),Unknown),Product(Operator(Equal,Execute(Override(Identifier(add),[Identifier(a),Identifier(b)]),[]),Execute(Override(Identifier(add),[Identifier(b),Identifier(a)]),[])))]),Scope[Identifier(Ring),Scope[Pointing(Identifier(T),Scope[]),Pointing(Identifier(addNeutral),Scope[]),Pointing(Identifier(add),Scope[Constraint(Identifier(T),Identifier(a)),Constraint(Identifier(T),Identifier(b)),Product(Scope[Expand(Identifier(a)),Expand(Identifier(b))])]),Pointing(Identifier(mult),Scope[Constraint(Identifier(T),Identifier(a)),Constraint(Identifier(T),Identifier(b)),Product(Pattern(Identifier(a),[Branch(Scope[],Scope[]),Branch(Scope[Scope[],Constraint(Expand(Identifier(T)),Identifier(r))],Scope[Expand(Identifier(b)),Expand(Execute(Override(Identifier(mult),[Identifier(r),Identifier(b)]),[])])])))]),Pointing(Identifier(addCommutative),Scope[Pointing(Constraint(Identifier(Nat),Identifier(a)),Unknown),Pointing(Constraint(Identifier(Nat),Identifier(b)),Unknown),Product(Operator(Equal,Execute(Override(Identifier(add),[Identifier(a),Identifier(b)]),[]),Execute(Override(Identifier(add),[Identifier(b),Identifier(a)]),[])))]),Pointing(Identifier(multByOne),Scope[Pointing(Constraint(Identifier(T),Identifier(n)),Unknown),Product(Operator(Equal,Execute(Override(Identifier(mult),[Identifier(n),Scope[Scope[]]]),[]),Identifier(n)))])]]]"
}
