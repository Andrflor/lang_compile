{
  "name": "Counter with Resonance, Events, and Proofs",
  "description": "Tests resonance operators, event handling, unknown values for proofs, and enforcement operators",
  "source": "Counter -> {\n  Change -> {\n    u8:value\n  }\n  -> {\n    u8:value -> 0\n    // Value is now driven via Change resonance\n    value >>- Change\n    Change -< e {\n      // We can use resonance to drive value here\n      value -<< e.value\n    }\n    increment -> {\n      >- Change{value+1}\n    }\n    decrement -> {\n      >- Change{value-1}\n    }\n    // This is the correct Change driven value\n    -> value\n  }\n  // We are using ?? and compile time default constant force to proove properties\n  incrementAlwaysIncreases -> {\n    u8:prev -> ??\n    Counter:count{value -> prev}\n    count.increment!\n    -> count! = prev + 1\n  }\n  decrementAlwaysDecreases -> {\n    u8:prev -> ??\n    Counter:count{value -> prev}\n    count.decrement!\n    -> count! = prev - 1\n  }\n  incrementAndDecrementAreComplementaty -> {\n    u8:prev -> ??\n    Counter:count{value -> prev}\n    count.increment!\n    count.decrement!\n    -> count! = prev\n  }\n}\nCounter:globalCounter\n// counterPositive is true\nbool:counterPositive >>- globalCounter.value >= 0\nfunWithCounter -> {\n  globalCounter.decrement!\n  globalCounter.increment!\n}\nfunWithCounter! // counterPositive updates to false then to true again\nState -> {\n  T <- None\n  T:initial\n  Update -> {\n    T:value\n  }\n  -> {\n    T:value -> initial\n    value >>- Update\n    Update -< e {\n      value >>- e.value\n    }\n    update -> {\n      T:value\n      >- Update{value}\n    }\n    -> value\n  }\n}\nDynList -> {\n  T -> None\n  Update -> {\n    T:data\n    u64:length\n  }\n  -> {\n    u64:length\n    List{T}:value\n    length -> // Need to compute initial length\n    length >>- Update\n    value >>- Update\n    Update -< e {\n      value >>- e.data\n      length >>- e.length\n    }\n    push -> {\n      T:element\n      >- Update{{...value element} _length+1}\n    }\n    -> value\n  }\n}\nDynList{u8}:dynList{value->{1 2 3 4 5}}\ndynList.length // 5\ndynList.push{6}!\ndynList! // {1 2 3 4 5 6}\ndynList.length // 6\nLogging -> {\n  Log -> {\n    String:message\n  }\n  Log -< e {\n    -> io.write{e.message}!\n  }\n}\nmain -> {\n  ...Logging\n   Counter:counter\n   >- Log{counter!} // 0\n   counter.increment!\n   >- Log{counter!} // 1\n   counter.decrement!\n   >- Log{counter!} // 0\n}\nmain!",
  "expect": "Scope[Pointing(Identifier(Counter),Scope[Pointing(Identifier(Change),Scope[Constraint(Identifier(u8),Identifier(value))]),Product(Scope[Pointing(Constraint(Identifier(u8),Identifier(value)),Literal(Integer,0)),ResonancePush(Identifier(value),Identifier(Change)),EventPull(Identifier(Change),Override(Identifier(e),[ResonancePull(Identifier(value),Property(Identifier(e),Identifier(value)))])),Pointing(Identifier(increment),Scope[EventPush(nil,Override(Identifier(Change),[Operator(Add,Identifier(value),Literal(Integer,1))]))]),Pointing(Identifier(decrement),Scope[EventPush(nil,Override(Identifier(Change),[Operator(Subtract,Identifier(value),Literal(Integer,1))]))]),Product(Identifier(value))]),Pointing(Identifier(incrementAlwaysIncreases),Scope[Pointing(Constraint(Identifier(u8),Identifier(prev)),Unknown),Override(Constraint(Identifier(Counter),Identifier(count)),[Pointing(Identifier(value),Identifier(prev))]),Execute(Property(Identifier(count),Identifier(increment)),[]),Product(Operator(Equal,Execute(Identifier(count),[]),Operator(Add,Identifier(prev),Literal(Integer,1))))]),Pointing(Identifier(decrementAlwaysDecreases),Scope[Pointing(Constraint(Identifier(u8),Identifier(prev)),Unknown),Override(Constraint(Identifier(Counter),Identifier(count)),[Pointing(Identifier(value),Identifier(prev))]),Execute(Property(Identifier(count),Identifier(decrement)),[]),Product(Operator(Equal,Execute(Identifier(count),[]),Operator(Subtract,Identifier(prev),Literal(Integer,1))))]),Pointing(Identifier(incrementAndDecrementAreComplementaty),Scope[Pointing(Constraint(Identifier(u8),Identifier(prev)),Unknown),Override(Constraint(Identifier(Counter),Identifier(count)),[Pointing(Identifier(value),Identifier(prev))]),Execute(Property(Identifier(count),Identifier(increment)),[]),Execute(Property(Identifier(count),Identifier(decrement)),[]),Product(Operator(Equal,Execute(Identifier(count),[]),Identifier(prev)))])]),Constraint(Identifier(Counter),Identifier(globalCounter)),ResonancePush(Constraint(Identifier(bool),Identifier(counterPositive)),Operator(GreaterEqual,Property(Identifier(globalCounter),Identifier(value)),Literal(Integer,0))),Pointing(Identifier(funWithCounter),Scope[Execute(Property(Identifier(globalCounter),Identifier(decrement)),[]),Execute(Property(Identifier(globalCounter),Identifier(increment)),[])]),Execute(Identifier(funWithCounter),[]),Pointing(Identifier(State),Scope[PointingPull(Identifier(T),Identifier(None)),Constraint(Identifier(T),Identifier(initial)),Pointing(Identifier(Update),Scope[Constraint(Identifier(T),Identifier(value))]),Product(Scope[Pointing(Constraint(Identifier(T),Identifier(value)),Identifier(initial)),ResonancePush(Identifier(value),Identifier(Update)),EventPull(Identifier(Update),Override(Identifier(e),[ResonancePush(Identifier(value),Property(Identifier(e),Identifier(value)))])),Pointing(Identifier(update),Scope[Constraint(Identifier(T),Identifier(value)),EventPush(nil,Override(Identifier(Update),[Identifier(value)]))]),Product(Identifier(value))])]),Pointing(Identifier(DynList),Scope[Pointing(Identifier(T),Identifier(None)),Pointing(Identifier(Update),Scope[Constraint(Identifier(T),Identifier(data)),Constraint(Identifier(u64),Identifier(length))]),Product(Scope[Constraint(Identifier(u64),Identifier(length)),Constraint(Override(Identifier(List),[Identifier(T)]),Identifier(value)),Pointing(Identifier(length),nil),ResonancePush(Identifier(length),Identifier(Update)),ResonancePush(Identifier(value),Identifier(Update)),EventPull(Identifier(Update),Override(Identifier(e),[ResonancePush(Identifier(value),Property(Identifier(e),Identifier(data))),ResonancePush(Identifier(length),Property(Identifier(e),Identifier(length)))])),Pointing(Identifier(push),Scope[Constraint(Identifier(T),Identifier(element)),EventPush(nil,Override(Identifier(Update),[Scope[Expand(Identifier(value)),Identifier(element)],Operator(Add,Identifier(_length),Literal(Integer,1))]))]),Product(Identifier(value))])]),Override(Constraint(Override(Identifier(DynList),[Identifier(u8)]),Identifier(dynList)),[Pointing(Identifier(value),Scope[Literal(Integer,1),Literal(Integer,2),Literal(Integer,3),Literal(Integer,4),Literal(Integer,5)])]),Property(Identifier(dynList),Identifier(length)),Execute(Override(Property(Identifier(dynList),Identifier(push)),[Literal(Integer,6)]),[]),Execute(Identifier(dynList),[]),Property(Identifier(dynList),Identifier(length)),Pointing(Identifier(Logging),Scope[Pointing(Identifier(Log),Scope[Constraint(Identifier(String),Identifier(message))]),EventPull(Identifier(Log),Override(Identifier(e),[Product(Execute(Override(Property(Identifier(io),Identifier(write)),[Property(Identifier(e),Identifier(message))]),[]))]))]),Pointing(Identifier(main),Scope[Expand(Identifier(Logging)),Constraint(Identifier(Counter),Identifier(counter)),EventPush(nil,Override(Identifier(Log),[Execute(Identifier(counter),[])])),Execute(Property(Identifier(counter),Identifier(increment)),[]),EventPush(nil,Override(Identifier(Log),[Execute(Identifier(counter),[])])),Execute(Property(Identifier(counter),Identifier(decrement)),[]),EventPush(nil,Override(Identifier(Log),[Execute(Identifier(counter),[])]))]),Execute(Identifier(main),[])]"
}
