{
  "name": "Complex Program with Types, Patterns, and Effects",
  "description": "Tests a complete program with type definitions, pattern matching, side effects, and execution patterns",
  "source": "Color -> {\n  -> {\n    u8:r\n    u8:g\n    u8:b\n    u8:a -> 255\n  }\n}\n\nnum -> {\n  -> u8:\n  -> u32:\n  -> u64:\n}\n\nPlane2D -> @lib.geometry.Plane\n\n...@lib.geometry{Plane->Plane{dimenion->3}}\n\nPlane3D -> Plane\n\nCircle->{->{u8:radius}}\nSquare->{->{u8:side}}\n\nShape -> {\n  circle -> Circle\n  square -> Square\n  -> circle:\n  -> square:\n}\n\nNone->{}\nmaybe -> {\n  T -> None\n  -> None:\n  -> T:\n}\n\ndouble -> {\n  maybe{Shape}:shape\n  -> shape ? {\n    None: -> shape\n    Circle: -> shape{radius->radius*2}\n    Square: -> shape{side->side*2}\n  }\n}\n\nList -> {\n  T -> None\n  -> {}\n  -> {\n    T:\n    ...List{T}:\n  }\n}\n\nmap -> {\n  S <- None\n  R <- None\n  List{S}:list\n  mapper -> {\n    S:(e)\n    -> R:\n  }\n  -> list ? {\n    None: -> list\n    {S:(e) ...List{S}:(l)}: -> map{{mapper{e}! ...l} mapper->mapper}!\n  }\n}\n\nNonEmptyList -> {\n  T -> None\n  -> {T: ...List{T}:}\n}\n\nreduce -> {\n  T <- None\n  NonEmptyList{T}:list\n  reducer -> {\n    T:(a)\n    T:(b)\n    -> T:\n  }\n  -> list ? {\n    {T:(e)}: -> e\n    {T:(e1) T:(e2) ...List{T}:(l)}: -> reduce{\n      list->{reducer{a->e1 b->e2}! ...l}\n      reducer->reducer\n    }!\n  }\n}\n\nError -> {\n  String:(message)\n}\n\nerrorNoneReduce -> {\n  T <- None\n  List{T}:list\n  reducer -> {\n    T:(a)\n    T:(b)\n    -> T:\n  }\n  -> list ? {\n    None: -> Error{\"Trying to reduce empty list\"}\n    {T:(e)}: -> e\n    {T:(e1) T:(e2) ...List{T}:(l)}: -> reduce{\n      list->{reducer{a->e1 b->e2}! ...l}\n      reducer->reducer\n    }!\n  }\n}\n\ntransform -> {\n  maybe{Shape}:shape\n  transformer -> {\n    maybe{Shape}:shape\n    -> shape\n  }\n  -> transformer{shape->shape}!\n}\n\ndoubleV2 -> transform{transformer->double}\n\nmaybe{u8}:data -> 22\nmaybe{Shape}:shape -> data ? {\n None: -> data\n u8: -> Circle:{radius->data}\n}\n\nshape -> double{shape->shape}!\nshape -> doubleV2{shape->shape}!\n\nsquare -> {\n  maybe{num}:n\n  -> n ? {\n    None: -> 0\n    num: -> n*n\n    }\n  }\n}\nmaybe{u32}:plop -> 12\n\nsquare{n->22}!\nsquare{n->plop}!\nsquare{n->{}}!\n\nLog -> {\n  String:message\n}\n\nInput -> {\n  String:message\n}\n\nLogger -> {\n  -> {\n    String:message\n  }\n}\n\nGet -> {\n  String:url\n}\n\nArenaAlloc -> {\n   u64:size\n}\n\ndebugPrint -> {\n  String:message\n  >- Logger:debug{message->message}\n}\n\nprintBack -> {\n  String:message\n  String:input >- Input{message->message}\n  >- Log{message->input}\n  debugPrint{message->message}!\n}\n\ngetPony -> {\n  response >- Get{url->\"www.pony.com\"}\n  -> response\n}\n\nhttpCompileTime -> !{@http}\n\nString:configText -> httpCompileTime.get{\"https://api.myservice.com/config\"}!\n\nresult -> configText ? {\n  \"PRODUCTION\" -> \"Production mode\"\n  \"DEVELOPMENT\" -> \"Development mode\"\n  -> \"Unknown mode\"\n}\n\nmain -> {\n  Arena:arena\n  Log -< e {\n    -> io.write{e.message}!\n  }\n  Get -< e {\n    -> http.get{e.url}!\n  }\n  Input -< e {\n    -> io.read{e.message}!\n  }\n  ArenaAlloc -< e {\n    -> arena.allocate{e.size}!\n  }\n  Logger:debug -< e {\n    -> io.writeln{e.message}!\n  }\n  response -> getPony(!)\n  printBack{message->\"Input something here\"}!\n  debugPrint{message->response!}(!)\n  debugPrint{message->result}\n  packed -> map{\n    mapper->double\n    list->{1 2 3 4 5}\n  }\n\n  result -> packed([!])\n\n  packed!\n  packed<!>\n  packed[!]\n  packed(!)\n  packed([!])\n  packed|!|\n  packed(|!|)\n\n  debugPrint{message->result!}!\n  -> 0\n}\n\n->main!",
  "expect": "Scope[Pointing(Identifier(Color),Scope[Product(Scope[Constraint(Identifier(u8),Identifier(r)),Constraint(Identifier(u8),Identifier(g)),Constraint(Identifier(u8),Identifier(b)),Pointing(Constraint(Identifier(u8),Identifier(a)),Literal(Integer,255))])]),Pointing(Identifier(num),Scope[Product(Constraint(Identifier(u8),nil)),Product(Constraint(Identifier(u32),nil)),Product(Constraint(Identifier(u64),nil))]),Pointing(Identifier(Plane2D),Property(Property(External(lib,nil),Identifier(geometry)),Identifier(Plane))),Expand(Override(Property(External(lib,nil),Identifier(geometry)),[Pointing(Identifier(Plane),Override(Identifier(Plane),[Pointing(Identifier(dimenion),Literal(Integer,3))]))])),Pointing(Identifier(Plane3D),Identifier(Plane)),Pointing(Identifier(Circle),Scope[Product(Scope[Constraint(Identifier(u8),Identifier(radius))])]),Pointing(Identifier(Square),Scope[Product(Scope[Constraint(Identifier(u8),Identifier(side))])]),Pointing(Identifier(Shape),Scope[Pointing(Identifier(circle),Identifier(Circle)),Pointing(Identifier(square),Identifier(Square)),Product(Constraint(Identifier(circle),nil)),Product(Constraint(Identifier(square),nil))]),Pointing(Identifier(None),Scope[]),Pointing(Identifier(maybe),Scope[Pointing(Identifier(T),Identifier(None)),Product(Constraint(Identifier(None),nil)),Product(Constraint(Identifier(T),nil))]),Pointing(Identifier(double),Scope[Constraint(Override(Identifier(maybe),[Identifier(Shape)]),Identifier(shape)),Product(Pattern(Identifier(shape),[Branch(Identifier(None),Identifier(shape)),Branch(Identifier(Circle),Override(Identifier(shape),[Pointing(Identifier(radius),Operator(Multiply,Identifier(radius),Literal(Integer,2)))])),Branch(Identifier(Square),Override(Identifier(shape),[Pointing(Identifier(side),Operator(Multiply,Identifier(side),Literal(Integer,2)))]))])),]),Pointing(Identifier(List),Scope[Pointing(Identifier(T),Identifier(None)),Product(Scope[]),Product(Scope[Constraint(Identifier(T),nil),Constraint(Expand(Override(Identifier(List),[Identifier(T)])),nil)])]),Pointing(Identifier(map),Scope[PointingPull(Identifier(S),Identifier(None)),PointingPull(Identifier(R),Identifier(None)),Constraint(Override(Identifier(List),[Identifier(S)]),Identifier(list)),Pointing(Identifier(mapper),Scope[Constraint(Identifier(S),Identifier(,e)),Product(Constraint(Identifier(R),nil))]),Product(Pattern(Identifier(list),[Branch(Identifier(None),Identifier(list)),Branch(Scope[Constraint(Identifier(S),Identifier(,e)),Constraint(Expand(Override(Identifier(List),[Identifier(S)])),Identifier(,l))],Execute(Override(Identifier(map),[Scope[Execute(Override(Identifier(mapper),[Identifier(e)]),[]],Expand(Identifier(l))],Pointing(Identifier(mapper),Identifier(mapper))]),[])])]))]),Pointing(Identifier(NonEmptyList),Scope[Pointing(Identifier(T),Identifier(None)),Product(Scope[Constraint(Identifier(T),nil),Constraint(Expand(Override(Identifier(List),[Identifier(T)])),nil)])]),Pointing(Identifier(reduce),Scope[PointingPull(Identifier(T),Identifier(None)),Constraint(Override(Identifier(NonEmptyList),[Identifier(T)]),Identifier(list)),Pointing(Identifier(reducer),Scope[Constraint(Identifier(T),Identifier(,a)),Constraint(Identifier(T),Identifier(,b)),Product(Constraint(Identifier(T),nil))]),Product(Pattern(Identifier(list),[Branch(Scope[Constraint(Identifier(T),Identifier(,e))],Identifier(e)),Branch(Scope[Constraint(Identifier(T),Identifier(,e1)),Constraint(Identifier(T),Identifier(,e2)),Constraint(Expand(Override(Identifier(List),[Identifier(T)])),Identifier(,l))],Execute(Override(Identifier(reduce),[Pointing(Identifier(list),Scope[Execute(Override(Identifier(reducer),[Pointing(Identifier(a),Identifier(e1)),Pointing(Identifier(b),Identifier(e2))]),[]),Expand(Identifier(l))]),Pointing(Identifier(reducer),Identifier(reducer))]),[])])))]),Pointing(Identifier(Error),Scope[Constraint(Identifier(String),Identifier(,message))]),Pointing(Identifier(errorNoneReduce),Scope[PointingPull(Identifier(T),Identifier(None)),Constraint(Override(Identifier(List),[Identifier(T)]),Identifier(list)),Pointing(Identifier(reducer),Scope[Constraint(Identifier(T),Identifier(,a)),Constraint(Identifier(T),Identifier(,b)),Product(Constraint(Identifier(T),nil))]),Product(Pattern(Identifier(list),[Branch(Identifier(None),Override(Identifier(Error),[Literal(String,Trying to reduce empty list)])),Branch(Scope[Constraint(Identifier(T),Identifier(,e))],Identifier(e)),Branch(Scope[Constraint(Identifier(T),Identifier(,e1)),Constraint(Identifier(T),Identifier(,e2)),Constraint(Expand(Override(Identifier(List),[Identifier(T)])),Identifier(,l))],Execute(Override(Identifier(reduce),[Pointing(Identifier(list),Scope[Execute(Override(Identifier(reducer),[Pointing(Identifier(a),Identifier(e1)),Pointing(Identifier(b),Identifier(e2))]),[]),Expand(Identifier(l))]),Pointing(Identifier(reducer),Identifier(reducer))]),[])])))]),Pointing(Identifier(transform),Scope[Constraint(Override(Identifier(maybe),[Identifier(Shape)]),Identifier(shape)),Pointing(Identifier(transformer),Scope[Constraint(Override(Identifier(maybe),[Identifier(Shape)]),Identifier(shape)),Product(Identifier(shape))]),Product(Execute(Override(Identifier(transformer),[Pointing(Identifier(shape),Identifier(shape))]),[])),]),Pointing(Identifier(doubleV2),Override(Identifier(transform),[Pointing(Identifier(transformer),Identifier(double))])),Pointing(Constraint(Override(Identifier(maybe),[Identifier(u8)]),Identifier(data)),Literal(Integer,22)),Pointing(Constraint(Override(Identifier(maybe),[Identifier(Shape)]),Identifier(shape)),Pattern(Identifier(data),[Branch(Identifier(None),Identifier(data)),Branch(Identifier(u8),Override(Identifier(Circle),[Pointing(Identifier(radius),Identifier(data))]))])),Pointing(Identifier(shape),Execute(Override(Identifier(double),[Pointing(Identifier(shape),Identifier(shape))]),[])),Pointing(Identifier(shape),Execute(Override(Identifier(doubleV2),[Pointing(Identifier(shape),Identifier(shape))]),[])),Pointing(Identifier(square),Scope[Constraint(Override(Identifier(maybe),[Identifier(num)]),Identifier(n)),Product(Pattern(Identifier(n),[Branch(Identifier(None),Literal(Integer,0)),Branch(Identifier(num),Operator(Multiply,Identifier(n),Identifier(n)))])),]),Pointing(Constraint(Override(Identifier(maybe),[Identifier(u32)]),Identifier(plop)),Literal(Integer,12)),Execute(Override(Identifier(square),[Pointing(Identifier(n),Literal(Integer,22))]),[]),Execute(Override(Identifier(square),[Pointing(Identifier(n),Identifier(plop))]),[]),Execute(Override(Identifier(square),[Pointing(Identifier(n),Scope[])]),[]),Pointing(Identifier(Log),Scope[Constraint(Identifier(String),Identifier(message))]),Pointing(Identifier(Input),Scope[Constraint(Identifier(String),Identifier(message))]),Pointing(Identifier(Logger),Scope[Product(Scope[Constraint(Identifier(String),Identifier(message))])]),Pointing(Identifier(Get),Scope[Constraint(Identifier(String),Identifier(url))]),Pointing(Identifier(ArenaAlloc),Scope[Constraint(Identifier(u64),Identifier(size))]),Pointing(Identifier(debugPrint),Scope[Constraint(Identifier(String),Identifier(message)),EventPush(nil,Constraint(Property(Identifier(Logger),Identifier(debug)),Override(nil,[Pointing(Identifier(message),Identifier(message))])))]),Pointing(Identifier(printBack),Scope[Constraint(Identifier(String),Identifier(message)),EventPush(Constraint(Identifier(String),Identifier(input)),Override(Identifier(Input),[Pointing(Identifier(message),Identifier(message))])),EventPush(nil,Override(Identifier(Log),[Pointing(Identifier(message),Identifier(input))])),Execute(Override(Identifier(debugPrint),[Pointing(Identifier(message),Identifier(message))]),[])),Pointing(Identifier(getPony),Scope[EventPush(Identifier(response),Override(Identifier(Get),[Pointing(Identifier(url),Literal(String,www.pony.com))])),Product(Identifier(response))]),Pointing(Identifier(httpCompileTime),Execute(Scope[External(http,nil)],[])),Pointing(Constraint(Identifier(String),Identifier(configText)),Execute(Property(Identifier(httpCompileTime),Override(Identifier(get),[Literal(String,https://api.myservice.com/config)])),[])),Pointing(Identifier(result),Pattern(Identifier(configText),[Branch(Literal(String,PRODUCTION),Literal(String,Production mode)),Branch(Literal(String,DEVELOPMENT),Literal(String,Development mode)),Branch(nil,Literal(String,Unknown mode))])),Pointing(Identifier(main),Scope[Constraint(Identifier(Arena),Identifier(arena)),EventPull(Identifier(Log),Scope[Identifier(,e),Product(Execute(Property(Identifier(io),Override(Identifier(write),[Property(Identifier(e),Identifier(message))])),[])),]),EventPull(Identifier(Get),Scope[Identifier(,e),Product(Execute(Property(Identifier(http),Override(Identifier(get),[Property(Identifier(e),Identifier(url))])),[])),]),EventPull(Identifier(Input),Scope[Identifier(,e),Product(Execute(Property(Identifier(io),Override(Identifier(read),[Property(Identifier(e),Identifier(message))])),[])),]),EventPull(Identifier(ArenaAlloc),Scope[Identifier(,e),Product(Execute(Property(Identifier(arena),Override(Identifier(allocate),[Property(Identifier(e),Identifier(size))])),[])),]),EventPull(Property(Identifier(Logger),Identifier(debug)),Scope[Identifier(,e),Product(Execute(Property(Identifier(io),Override(Identifier(writeln),[Property(Identifier(e),Identifier(message))])),[])),]),Pointing(Identifier(response),Execute(Identifier(getPony),[])),Execute(Override(Identifier(printBack),[Pointing(Identifier(message),Literal(String,Input something here))]),[])),Execute(Override(Identifier(debugPrint),[Pointing(Identifier(message),Execute(Identifier(response),[]))]),[])),Execute(Override(Identifier(debugPrint),[Pointing(Identifier(message),Identifier(result))]),[])),Pointing(Identifier(packed),Override(Identifier(map),[Pointing(Identifier(mapper),Identifier(double)),Pointing(Identifier(list),Scope[Literal(Integer,1),Literal(Integer,2),Literal(Integer,3),Literal(Integer,4),Literal(Integer,5)])])),Pointing(Identifier(result),Execute(Identifier(packed),[Parallel_CPU])),Execute(Identifier(packed),[])),Execute(Identifier(packed),[Threading])),Execute(Identifier(packed),[Parallel_CPU])),Execute(Identifier(packed),[Background])),Execute(Identifier(packed),[Background,Parallel_CPU])),Execute(Identifier(packed),[GPU])),Execute(Identifier(packed),[Background,GPU])),Execute(Override(Identifier(debugPrint),[Pointing(Identifier(message),Execute(Identifier(result),[]))]),[])),Product(Literal(Integer,0)),]),Product(Execute(Identifier(main),[]))]"
}
