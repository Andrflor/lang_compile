package wasm_assembler

// WASM Value Types
ValueType :: enum u8 {
    I32 = 0x7F,
    I64 = 0x7E,
    F32 = 0x7D,
    F64 = 0x7C,
    V128 = 0x7B,
    FUNCREF = 0x70,
    EXTERNREF = 0x6F
}

// WASM Section Types
SectionType :: enum u8 {
    CUSTOM = 0,
    TYPE = 1,
    IMPORT = 2,
    FUNCTION = 3,
    TABLE = 4,
    MEMORY = 5,
    GLOBAL = 6,
    EXPORT = 7,
    START = 8,
    ELEMENT = 9,
    CODE = 10,
    DATA = 11
}

// === NUMERIC INSTRUCTIONS ===
// Integer Arithmetic
i32_add :: proc() {}
i32_sub :: proc() {}
i32_mul :: proc() {}
i32_div_s :: proc() {}
i32_div_u :: proc() {}
i32_rem_s :: proc() {}
i32_rem_u :: proc() {}

i64_add :: proc() {}
i64_sub :: proc() {}
i64_mul :: proc() {}
i64_div_s :: proc() {}
i64_div_u :: proc() {}
i64_rem_s :: proc() {}
i64_rem_u :: proc() {}

// Bitwise Operations
i32_and :: proc() {}
i32_or :: proc() {}
i32_xor :: proc() {}
i32_shl :: proc() {}
i32_shr_s :: proc() {}
i32_shr_u :: proc() {}
i32_rotl :: proc() {}
i32_rotr :: proc() {}

i64_and :: proc() {}
i64_or :: proc() {}
i64_xor :: proc() {}
i64_shl :: proc() {}
i64_shr_s :: proc() {}
i64_shr_u :: proc() {}
i64_rotl :: proc() {}
i64_rotr :: proc() {}

// Floating Point Arithmetic
f32_add :: proc() {}
f32_sub :: proc() {}
f32_mul :: proc() {}
f32_div :: proc() {}
f32_sqrt :: proc() {}
f32_min :: proc() {}
f32_max :: proc() {}
f32_ceil :: proc() {}
f32_floor :: proc() {}
f32_trunc :: proc() {}
f32_nearest :: proc() {}

f64_add :: proc() {}
f64_sub :: proc() {}
f64_mul :: proc() {}
f64_div :: proc() {}
f64_sqrt :: proc() {}
f64_min :: proc() {}
f64_max :: proc() {}
f64_ceil :: proc() {}
f64_floor :: proc() {}
f64_trunc :: proc() {}
f64_nearest :: proc() {}

// === CONVERSION INSTRUCTIONS ===
i32_wrap_i64 :: proc() {}
i32_trunc_f32_s :: proc() {}
i32_trunc_f32_u :: proc() {}
i32_trunc_f64_s :: proc() {}
i32_trunc_f64_u :: proc() {}

i64_extend_i32_s :: proc() {}
i64_extend_i32_u :: proc() {}
i64_trunc_f32_s :: proc() {}
i64_trunc_f32_u :: proc() {}
i64_trunc_f64_s :: proc() {}
i64_trunc_f64_u :: proc() {}

f32_convert_i32_s :: proc() {}
f32_convert_i32_u :: proc() {}
f32_convert_i64_s :: proc() {}
f32_convert_i64_u :: proc() {}
f32_demote_f64 :: proc() {}

f64_convert_i32_s :: proc() {}
f64_convert_i32_u :: proc() {}
f64_convert_i64_s :: proc() {}
f64_convert_i64_u :: proc() {}
f64_promote_f32 :: proc() {}

// === COMPARISON INSTRUCTIONS ===
i32_eqz :: proc() {}
i32_eq :: proc() {}
i32_ne :: proc() {}
i32_lt_s :: proc() {}
i32_lt_u :: proc() {}
i32_gt_s :: proc() {}
i32_gt_u :: proc() {}
i32_le_s :: proc() {}
i32_le_u :: proc() {}
i32_ge_s :: proc() {}
i32_ge_u :: proc() {}

i64_eqz :: proc() {}
i64_eq :: proc() {}
i64_ne :: proc() {}
i64_lt_s :: proc() {}
i64_lt_u :: proc() {}
i64_gt_s :: proc() {}
i64_gt_u :: proc() {}
i64_le_s :: proc() {}
i64_le_u :: proc() {}
i64_ge_s :: proc() {}
i64_ge_u :: proc() {}

f32_eq :: proc() {}
f32_ne :: proc() {}
f32_lt :: proc() {}
f32_gt :: proc() {}
f32_le :: proc() {}
f32_ge :: proc() {}

f64_eq :: proc() {}
f64_ne :: proc() {}
f64_lt :: proc() {}
f64_gt :: proc() {}
f64_le :: proc() {}
f64_ge :: proc() {}

// === MEMORY INSTRUCTIONS ===
// Basic memory load/store
i32_load :: proc(align: u32, offset: u32) {}
i64_load :: proc(align: u32, offset: u32) {}
f32_load :: proc(align: u32, offset: u32) {}
f64_load :: proc(align: u32, offset: u32) {}

i32_store :: proc(align: u32, offset: u32) {}
i64_store :: proc(align: u32, offset: u32) {}
f32_store :: proc(align: u32, offset: u32) {}
f64_store :: proc(align: u32, offset: u32) {}

// Byte-sized loads and stores
i32_load8_s :: proc(align: u32, offset: u32) {}
i32_load8_u :: proc(align: u32, offset: u32) {}
i32_load16_s :: proc(align: u32, offset: u32) {}
i32_load16_u :: proc(align: u32, offset: u32) {}

i64_load8_s :: proc(align: u32, offset: u32) {}
i64_load8_u :: proc(align: u32, offset: u32) {}
i64_load16_s :: proc(align: u32, offset: u32) {}
i64_load16_u :: proc(align: u32, offset: u32) {}
i64_load32_s :: proc(align: u32, offset: u32) {}
i64_load32_u :: proc(align: u32, offset: u32) {}

i32_store8 :: proc(align: u32, offset: u32) {}
i32_store16 :: proc(align: u32, offset: u32) {}
i64_store8 :: proc(align: u32, offset: u32) {}
i64_store16 :: proc(align: u32, offset: u32) {}
i64_store32 :: proc(align: u32, offset: u32) {}

// Memory management
memory_size :: proc() {}
memory_grow :: proc() {}

// === CONTROL FLOW INSTRUCTIONS ===
unreachable :: proc() {}
nop :: proc() {}
block :: proc(block_type: ValueType) {}
loop :: proc(block_type: ValueType) {}
if_instr :: proc(block_type: ValueType) {}
else_instr :: proc() {}
end :: proc() {}
br :: proc(label_idx: u32) {}
br_if :: proc(label_idx: u32) {}
br_table :: proc(labels: []u32, default_label: u32) {}
return_instr :: proc() {}

// === CALL INSTRUCTIONS ===
call :: proc(func_idx: u32) {}
call_indirect :: proc(type_idx: u32, table_idx: u32) {}

// === PARAMETRIC INSTRUCTIONS ===
drop :: proc() {}
select :: proc() {}
select_t :: proc(result_type: ValueType) {}

// === VARIABLE INSTRUCTIONS ===
local_get :: proc(local_idx: u32) {}
local_set :: proc(local_idx: u32) {}
local_tee :: proc(local_idx: u32) {}
global_get :: proc(global_idx: u32) {}
global_set :: proc(global_idx: u32) {}

// === REFERENCE INSTRUCTIONS ===
ref_null :: proc(ref_type: ValueType) {}
ref_is_null :: proc() {}
ref_func :: proc(func_idx: u32) {}

// === VECTOR INSTRUCTIONS ===
v128_load :: proc(align: u32, offset: u32) {}
v128_store :: proc(align: u32, offset: u32) {}

// Vector arithmetic
f32x4_add :: proc() {}
f32x4_sub :: proc() {}
f32x4_mul :: proc() {}
f32x4_div :: proc() {}
f32x4_min :: proc() {}
f32x4_max :: proc() {}
f32x4_abs :: proc() {}
f32x4_neg :: proc() {}
f32x4_sqrt :: proc() {}

f64x2_add :: proc() {}
f64x2_sub :: proc() {}
f64x2_mul :: proc() {}
f64x2_div :: proc() {}
f64x2_min :: proc() {}
f64x2_max :: proc() {}
f64x2_abs :: proc() {}
f64x2_neg :: proc() {}
f64x2_sqrt :: proc() {}

// Integer vector operations
i8x16_add :: proc() {}
i8x16_sub :: proc() {}
i8x16_mul :: proc() {}
i8x16_abs :: proc() {}
i8x16_neg :: proc() {}

i16x8_add :: proc() {}
i16x8_sub :: proc() {}
i16x8_mul :: proc() {}
i16x8_abs :: proc() {}
i16x8_neg :: proc() {}

i32x4_add :: proc() {}
i32x4_sub :: proc() {}
i32x4_mul :: proc() {}
i32x4_abs :: proc() {}
i32x4_neg :: proc() {}

i64x2_add :: proc() {}
i64x2_sub :: proc() {}
i64x2_mul :: proc() {}
i64x2_abs :: proc() {}
i64x2_neg :: proc() {}

// Vector bitwise operations
v128_and :: proc() {}
v128_or :: proc() {}
v128_xor :: proc() {}
v128_not :: proc() {}
v128_andnot :: proc() {}

// Vector shifts
i8x16_shl :: proc() {}
i8x16_shr_s :: proc() {}
i8x16_shr_u :: proc() {}

i16x8_shl :: proc() {}
i16x8_shr_s :: proc() {}
i16x8_shr_u :: proc() {}

i32x4_shl :: proc() {}
i32x4_shr_s :: proc() {}
i32x4_shr_u :: proc() {}

i64x2_shl :: proc() {}
i64x2_shr_s :: proc() {}
i64x2_shr_u :: proc() {}

// Vector comparisons
i8x16_eq :: proc() {}
i8x16_ne :: proc() {}
i8x16_lt_s :: proc() {}
i8x16_lt_u :: proc() {}
i8x16_gt_s :: proc() {}
i8x16_gt_u :: proc() {}

i16x8_eq :: proc() {}
i16x8_ne :: proc() {}
i16x8_lt_s :: proc() {}
i16x8_lt_u :: proc() {}
i16x8_gt_s :: proc() {}
i16x8_gt_u :: proc() {}

i32x4_eq :: proc() {}
i32x4_ne :: proc() {}
i32x4_lt_s :: proc() {}
i32x4_lt_u :: proc() {}
i32x4_gt_s :: proc() {}
i32x4_gt_u :: proc() {}

// Vector conversions
i8x16_extend_low_i8x16_s :: proc() {}
i8x16_extend_high_i8x16_s :: proc() {}
i8x16_extend_low_i8x16_u :: proc() {}
i8x16_extend_high_i8x16_u :: proc() {}

i16x8_extend_low_i16x8_s :: proc() {}
i16x8_extend_high_i16x8_s :: proc() {}
i16x8_extend_low_i16x8_u :: proc() {}
i16x8_extend_high_i16x8_u :: proc() {}

// Vector shuffles and swizzles
i8x16_swizzle :: proc() {}
i8x16_shuffle :: proc(lanes: [16]u8) {}

// Reduction operations
i8x16_bitmask :: proc() {}
i16x8_bitmask :: proc() {}
i32x4_bitmask :: proc() {}
i64x2_bitmask :: proc() {}

// Advanced vector operations
f32x4_convert_i32x4_s :: proc() {}
f32x4_convert_i32x4_u :: proc() {}
i32x4_trunc_sat_f32x4_s :: proc() {}
i32x4_trunc_sat_f32x4_u :: proc() {}

// === ATOMIC MEMORY INSTRUCTIONS ===
atomic_load :: proc(type: ValueType, align: u32, offset: u32) {}
atomic_store :: proc(type: ValueType, align: u32, offset: u32) {}
atomic_rmw_add :: proc(type: ValueType, align: u32, offset: u32) {}
atomic_rmw_sub :: proc(type: ValueType, align: u32, offset: u32) {}
atomic_rmw_and :: proc(type: ValueType, align: u32, offset: u32) {}
atomic_rmw_or :: proc(type: ValueType, align: u32, offset: u32) {}
atomic_rmw_xor :: proc(type: ValueType, align: u32, offset: u32) {}
atomic_rmw_xchg :: proc(type: ValueType, align: u32, offset: u32) {}
atomic_rmw_cmpxchg :: proc(type: ValueType, align: u32, offset: u32) {}

// === RELAXED SIMD INSTRUCTIONS ===
relaxed_laneselect_i8x16 :: proc() {}
relaxed_laneselect_i16x8 :: proc() {}
relaxed_laneselect_i32x4 :: proc() {}
relaxed_laneselect_i64x2 :: proc() {}

// === MISC EXTENDED INSTRUCTIONS ===
memory_init :: proc(data_idx: u32) {}
data_drop :: proc(data_idx: u32) {}
memory_copy :: proc() {}
memory_fill :: proc() {}
table_init :: proc(elem_idx: u32, table_idx: u32) {}
elem_drop :: proc(elem_idx: u32) {}
table_copy :: proc(dst_table: u32, src_table: u32) {}
table_grow :: proc(table_idx: u32) {}
table_size :: proc(table_idx: u32) {}
table_fill :: proc(table_idx: u32) {}
